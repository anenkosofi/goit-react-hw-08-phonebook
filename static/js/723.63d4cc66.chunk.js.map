{"version":3,"file":"static/js/723.63d4cc66.chunk.js","mappings":"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","sources":["components/Filter/Filter.styled.js","components/Filter/Filter.js","components/EditForm/EditForm.styled.js","components/EditForm/EditForm.js","components/Modal/Modal.styled.js","components/Modal/Modal.js","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactsList.styled.js","components/ContactList/ContactsList.js","pages/Contacts/Contacts.styled.js","components/Notification/Notification.js","pages/Contacts/Contacts.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nconst Field = styled.div`\n  position: relative;\n\n  border-radius: 15px;\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  top: 50%;\n  left: 16px;\n  transform: translateY(-50%);\n\n  padding: 2px;\n\n  font-size: 16px;\n\n  color: rgb(200, 200, 200);\n\n  pointer-events: none;\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  Input:focus ~ &,\n  Input:not(:placeholder-shown) ~ & {\n    transform: translateY(-35px) scale(0.8);\n\n    color: #010101;\n    background-color: #fefefe;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  padding: 8px 16px;\n\n  font-size: 16px;\n\n  color: #010101;\n  background-color: transparent;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n  outline: none;\n\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus,\n  &:not(:placeholder-shown) {\n    border-color: #010101;\n  }\n`;\n\nexport { Field, Label, Input };\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/slice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { Field, Label, Input } from './Filter.styled';\n\nexport function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const { value } = e.currentTarget;\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <Field>\n      <Input type=\"text\" value={filter} onChange={onChange} placeholder=\" \" />\n      <Label>Find contacts by name</Label>\n    </Field>\n  );\n}\n","import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nconst EditContactForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  padding: 20px;\n  margin: 0 auto;\n\n  width: 99%;\n\n  background-color: #fefefe;\n\n  box-shadow: 0px 8px 12px -4px rgba(50, 88, 130, 0.32);\n  border-radius: 15px;\n\n  @media screen and (min-width: 768px) {\n    width: 510px;\n  }\n`;\n\nconst FormControls = styled.div`\n  position: relative;\n`;\n\nconst Input = styled(Field)`\n  width: 100%;\n  height: 50px;\n\n  padding: 8px 16px;\n\n  font-size: 16px;\n\n  color: #010101;\n  background-color: transparent;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n  outline: none;\n\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:focus,\n  &:not(:placeholder-shown) {\n    border-color: #010101;\n  }\n  &:not(:focus) {\n    border-color: rgb(200, 200, 200);\n  }\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  top: 50%;\n  left: 16px;\n  transform: translateY(-50%);\n\n  padding: 2px;\n\n  font-size: 16px;\n\n  color: rgb(200, 200, 200);\n\n  pointer-events: none;\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  input:focus ~ &,\n  input:not(:placeholder-shown) ~ & {\n    transform: translateY(-35px) scale(0.8);\n    color: #010101;\n    background-color: #fefefe;\n  }\n`;\n\nconst Error = styled(ErrorMessage)`\n  position: absolute;\n  bottom: -30%;\n  left: 4px;\n  font-size: 12px;\n  color: #ff4500;\n`;\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  margin: 0 auto;\n\n  min-width: 150px;\n  height: 50px;\n\n  font-size: 16px;\n  letter-spacing: 1px;\n  text-align: center;\n\n  color: #010101;\n  background-color: #ededed;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n\n  cursor: pointer;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #fefefe;\n    background-color: #1d976c;\n    border-color: #1d976c;\n  }\n  &:disabled {\n    background-color: #e2e2e2;\n    color: #636363;\n  }\n`;\n\nexport { EditContactForm, FormControls, Input, Label, Error, Button };\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectId } from 'redux/contacts/selectors';\nimport { setModal } from 'redux/modal/slice';\nimport { editContact } from 'redux/contacts/operations';\nimport {\n  EditContactForm,\n  FormControls,\n  Input,\n  Label,\n  Error,\n  Button,\n} from './EditForm.styled';\n\nexport function EditForm() {\n  const contacts = useSelector(selectContacts);\n  const contactId = useSelector(selectId);\n  const dispatch = useDispatch();\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  const contactInformation = contacts.find(({ id }) => id === contactId);\n  const { id, name, number } = contactInformation;\n\n  const initialValues = {\n    name: name,\n    number: number,\n  };\n\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      )\n      .required('This field is required'),\n    number: Yup.string()\n      .matches(\n        /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/,\n        'Phone number must be digits'\n      )\n      .required('This field is required'),\n  });\n\n  const handleSubmit = values => {\n    dispatch(\n      editContact({ id, contact: { ...contactInformation, ...values } })\n    );\n    dispatch(setModal());\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <EditContactForm autoComplete=\"off\">\n        <FormControls>\n          <Input\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\" \"\n            autoFocus\n          />\n          <Label htmlFor={nameId}>Name</Label>\n          <Error component=\"div\" name=\"name\" />\n        </FormControls>\n        <FormControls>\n          <Input\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\" \"\n          />\n          <Label htmlFor={numberId}>Number</Label>\n          <Error component=\"div\" name=\"number\" />\n        </FormControls>\n        <Button type=\"submit\">Save changes</Button>\n      </EditContactForm>\n    </Formik>\n  );\n}\n","import styled from 'styled-components';\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(0, 0, 0, 0.3);\n`;\n\nconst ModalWindow = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n\n  padding: 36px;\n\n  background-color: #e7ecf2;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n  border-radius: 10px;\n\n  transform: translate(-50%, -50%) scale(1);\n`;\n\nexport { Overlay, ModalWindow };\n","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useDispatch } from 'react-redux';\nimport { setModal } from 'redux/modal/slice';\nimport { EditForm } from 'components/EditForm';\nimport { Overlay, ModalWindow } from './Modal.styled';\n\nexport function Modal() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const handleKeydown = e => {\n      if (e.code === 'Escape') {\n        dispatch(setModal());\n      }\n    };\n    window.addEventListener('keydown', handleKeydown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  }, [dispatch]);\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      dispatch(setModal());\n    }\n  };\n\n  return createPortal(\n    <Overlay onClick={handleBackdropClick}>\n      <ModalWindow>\n        <EditForm />\n      </ModalWindow>\n    </Overlay>,\n    document.querySelector('#modal-root')\n  );\n}\n","import styled from 'styled-components';\n\nconst Contact = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  padding: 20px;\n\n  font-size: 24px;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n\n  cursor: pointer;\n\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    border-color: #010101;\n  }\n`;\n\nconst ContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n\n  @media screen and (max-width: 479px) {\n    font-size: 16px;\n  }\n\n  p {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n\n    svg {\n      stroke: #252f38;\n    }\n  }\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 12px;\n`;\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  gap: 4px;\n\n  padding: 8px;\n\n  font-size: 16px;\n  letter-spacing: 1px;\n\n  color: #010101;\n  background-color: #ededed;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n\n  cursor: pointer;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #fefefe;\n    background-color: #e1503d;\n    border-color: #e1503d;\n  }\n\n  :first-child {\n    &:hover,\n    &:focus {\n      color: #fefefe;\n      background-color: #2196f3;\n      border-color: #2196f3;\n    }\n  }\n\n  &:disabled {\n    background-color: #e2e2e2;\n    color: #636363;\n  }\n\n  @media screen and (min-width: 480px) {\n    min-width: 100px;\n    height: 40px;\n  }\n\n  span {\n    display: none;\n\n    @media screen and (min-width: 480px) {\n      display: inline-flex;\n    }\n  }\n`;\n\nexport { Contact, ContactWrapper, ButtonWrapper, Button };\n","import PropTypes from 'prop-types';\nimport { HiOutlinePhone, HiOutlineUserCircle } from 'react-icons/hi';\nimport { MdModeEdit, MdOutlineDelete } from 'react-icons/md';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setModal } from 'redux/modal/slice';\nimport { selectModalState } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Modal } from 'components/Modal';\nimport {\n  Contact,\n  ContactWrapper,\n  ButtonWrapper,\n  Button,\n} from './ContactListItem.styled';\n\nexport function ContactListItem({ contact: { id, name, number } }) {\n  const modalState = useSelector(selectModalState);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Contact>\n        <ContactWrapper>\n          <p>\n            <HiOutlineUserCircle size={24} />\n            <span>{name}</span>\n          </p>\n          <p>\n            <HiOutlinePhone size={24} />\n            <span>{number}</span>\n          </p>\n        </ContactWrapper>\n        <ButtonWrapper>\n          <Button type=\"button\" onClick={() => dispatch(setModal(id))}>\n            <MdModeEdit size={24} />\n            <span>Edit</span>\n          </Button>\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            <MdOutlineDelete size={24} />\n            <span>Delete</span>\n          </Button>\n        </ButtonWrapper>\n      </Contact>\n      {modalState && <Modal />}\n    </>\n  );\n}\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nconst Contacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport { Contacts };\n","import { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { ContactListItem } from 'components/ContactListItem';\nimport { Contacts } from './ContactsList.styled';\n\nexport function ContactList() {\n  const contacts = useSelector(selectFilteredContacts);\n\n  return (\n    <Contacts>\n      {contacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </Contacts>\n  );\n}\n","import styled from 'styled-components';\n\nconst ContactsSection = styled.section`\n  padding: 36px 0;\n`;\n\nconst Container = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 480px) {\n    width: 480px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 1200px;\n  }\n`;\n\nconst ContactWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n\n  padding: 20px;\n  margin: 0 auto;\n  width: 99%;\n\n  background-color: #fefefe;\n\n  border-radius: 15px;\n\n  text-align: center;\n\n  @media screen and (min-width: 768px) {\n    width: 510px;\n  }\n`;\n\nexport { ContactsSection, Container, ContactWrapper };\n","import PropTypes from 'prop-types';\n\nexport function Notification({ message }) {\n  return <p>{message}</p>;\n}\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/Filter';\nimport { ContactList } from 'components/ContactList';\nimport { ContactsSection, Container, ContactWrapper } from './Contacts.styled';\nimport { Notification } from 'components/Notification';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactsSection>\n      <Container>\n        <ContactWrapper>\n          <Filter />\n          {contacts.length > 0 ? (\n            <ContactList />\n          ) : (\n            <Notification message=\"There is no contacts.\" />\n          )}\n        </ContactWrapper>\n      </Container>\n    </ContactsSection>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContacts = state => state.contacts.items;\n\nconst selectIsLoading = state => state.contacts.isLoading;\n\nconst selectError = state => state.contacts.error;\n\nconst selectFilter = state => state.filter;\n\nconst selectModalState = state => state.modal.isModalOpened;\n\nconst selectId = state => state.modal.id;\n\nconst selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilter,\n  selectModalState,\n  selectId,\n  selectFilteredContacts,\n};\n"],"names":["Field","styled","Label","Input","Filter","filter","useSelector","selectFilter","dispatch","useDispatch","type","value","onChange","e","currentTarget","setFilter","placeholder","EditContactForm","Form","FormControls","Error","ErrorMessage","Button","EditForm","contacts","selectContacts","contactId","selectId","nameId","nanoid","numberId","contactInformation","find","id","initialValues","name","number","validationSchema","Yup","matches","required","onSubmit","values","editContact","contact","setModal","autoComplete","title","autoFocus","htmlFor","component","Overlay","ModalWindow","Modal","useEffect","handleKeydown","code","window","addEventListener","removeEventListener","createPortal","onClick","target","document","querySelector","Contact","ContactWrapper","ButtonWrapper","ContactListItem","modalState","selectModalState","size","deleteContact","Contacts","ContactList","selectFilteredContacts","map","ContactsSection","Container","Notification","message","fetchContacts","length","state","items","selectIsLoading","isLoading","modal","isModalOpened","createSelector","toLowerCase","includes"],"sourceRoot":""}