{"version":3,"file":"static/js/79.18f50083.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.js","pages/Register/Register.styled.js","pages/Register/Register.js","../node_modules/yup-password/index.js"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nconst SignUpForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  padding: 20px;\n  margin: 0 auto;\n\n  width: 99%;\n\n  background-color: #fefefe;\n\n  box-shadow: 0px 8px 12px -4px rgba(50, 88, 130, 0.32);\n  border-radius: 15px;\n\n  @media screen and (min-width: 768px) {\n    width: 510px;\n  }\n`;\n\nconst FormControls = styled.div`\n  position: relative;\n`;\n\nconst Input = styled(Field)`\n  width: 100%;\n  height: 50px;\n\n  padding: 8px 16px;\n\n  font-size: 16px;\n\n  color: #010101;\n  background-color: transparent;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n  outline: none;\n\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:focus,\n  &:not(:placeholder-shown) {\n    border-color: #010101;\n  }\n  &:not(:focus) {\n    border-color: rgb(200, 200, 200);\n  }\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  top: 50%;\n  left: 16px;\n  transform: translateY(-50%);\n\n  padding: 2px;\n\n  font-size: 16px;\n\n  color: rgb(200, 200, 200);\n\n  pointer-events: none;\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  input:focus ~ &,\n  input:not(:placeholder-shown) ~ & {\n    transform: translateY(-35px) scale(0.8);\n    color: #010101;\n    background-color: #fefefe;\n  }\n`;\n\nconst Error = styled(ErrorMessage)`\n  position: absolute;\n  bottom: -30%;\n  left: 4px;\n  font-size: 12px;\n  color: #ff4500;\n`;\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  margin: 0 auto;\n\n  min-width: 150px;\n  height: 50px;\n\n  font-size: 16px;\n  letter-spacing: 1px;\n  text-align: center;\n\n  color: #010101;\n  background-color: #ededed;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n\n  cursor: pointer;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #fefefe;\n    background-color: #1d976c;\n    border-color: #1d976c;\n  }\n  &:disabled {\n    background-color: #e2e2e2;\n    color: #636363;\n  }\n`;\n\nexport { SignUpForm, FormControls, Input, Label, Error, Button };\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport YupPassword from 'yup-password';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport {\n  SignUpForm,\n  FormControls,\n  Input,\n  Label,\n  Error,\n  Button,\n} from './RegisterForm.styled';\nYupPassword(Yup);\n\nexport function RegisterForm() {\n  const dispatch = useDispatch();\n  const nameId = nanoid();\n  const emailId = nanoid();\n  const passwordId = nanoid();\n\n  const initialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      )\n      .min(4, 'Must be 4 characters or more.')\n      .max(32, 'Must be 32 characters or less.')\n      .required('This field is required.'),\n    email: Yup.string()\n      .email('Invalid e-mail address.')\n      .required('This field is required.'),\n    password: Yup.string()\n      .minUppercase(1, 'Password must contain at least 1 uppercase letter.')\n      .minLowercase(6, 'Password must contain at least 6 lowercase letters.')\n      .minNumbers(1, 'Password must contain at least 1 number.')\n      .minSymbols(1, 'Password must contain at least 1 symbol.')\n      .required('This field is required.'),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(register(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <SignUpForm autoComplete=\"off\">\n        <FormControls>\n          <Input id={nameId} type=\"text\" name=\"name\" placeholder=\" \" />\n          <Label htmlFor={nameId}>Name</Label>\n          <Error component=\"div\" name=\"name\" />\n        </FormControls>\n        <FormControls>\n          <Input id={emailId} type=\"email\" name=\"email\" placeholder=\" \" />\n          <Label htmlFor={emailId}>E-mail</Label>\n          <Error component=\"div\" name=\"email\" />\n        </FormControls>\n        <FormControls>\n          <Input\n            id={passwordId}\n            type=\"password\"\n            name=\"password\"\n            placeholder=\" \"\n          />\n          <Label htmlFor={passwordId}>Password</Label>\n          <Error component=\"div\" name=\"password\" />\n        </FormControls>\n        <Button type=\"submit\">Sign Up</Button>\n      </SignUpForm>\n    </Formik>\n  );\n}\n","import styled from 'styled-components';\n\nconst SignUpSection = styled.section`\n  padding: 36px 0;\n`;\n\nconst Container = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 480px) {\n    width: 480px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 1200px;\n  }\n`;\n\nexport { SignUpSection, Container };\n","import { RegisterForm } from 'components/RegisterForm';\nimport { SignUpSection, Container } from './Register.styled';\n\nexport default function Register() {\n  return (\n    <SignUpSection>\n      <Container>\n        <RegisterForm />\n      </Container>\n    </SignUpSection>\n  );\n}\n","'use strict'\n\n// pluralize\nconst p = function (word, num) {\n    return num === 1 ? word : `${word}s`\n}\n\nconst isNullOrUndefined = function (value) {\n    return value === null || value === undefined\n}\n\nfunction minLowercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} lowercase ' + p('letter', length)\n    return this.test({\n        name: 'minLowercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[a-z]/g) || []).length >= length\n        }\n    })\n} // minLowercase()\n\nfunction minUppercase(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} uppercase ' + p('letter', length)\n    return this.test({\n        name: 'minUppercase',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[A-Z]/g) || []).length >= length\n        }\n    })\n} // minUppercase()\n\nfunction minNumbers(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('number', length)\n    return this.test({\n        name: 'minNumber',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[0-9]/g) || []).length >= length\n        }\n    })\n} // minNumber()\n\nfunction minSymbols(length = 1, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('symbol', length)\n    return this.test({\n        name: 'minSymbol',\n        exclusive: true,\n        message: msg,\n        params: { length },\n        test(value) {\n            return isNullOrUndefined(value) || (value.match(/[^a-zA-Z0-9\\s]/g) || []).length >= length\n        }\n    })\n} // minSymbol()\n\nfunction minRepeating(length = 2, message) {\n    const msg = message || '${path} must not contain sequences of more than ${length} repeated ' + p('character', length)\n    return this.test({\n        name: 'minRepeating',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return isNullOrUndefined(value) || ! new RegExp(`(.)\\\\1{${length},}`).test(value)\n        }\n    })\n} // minRepeating()\n\nfunction minWords(length = 2, message) {\n    const msg = message || '${path} must contain at least ${length} ' + p('word', length)\n    const rx = new RegExp('[a-zA-Z0-9]')\n    return this.test({\n        name: 'minWords',\n        exclusive: true,\n        message: msg,\n        params: { length: length },\n        test(value) {\n            return isNullOrUndefined(value) || value.split(' ').filter(v => !! v && rx.test(v)).length >= length\n        }\n    })\n} // minWords()\n\nfunction password() {\n    return this\n        .min(8)\n        .max(250)\n        .minLowercase(1)\n        .minUppercase(1)\n        .minNumbers(1)\n        .minSymbols(1)\n} // password()\n\nfunction setup(yup) {\n    yup.addMethod(yup.string, 'minLowercase', minLowercase)\n    yup.addMethod(yup.string, 'minUppercase', minUppercase)\n    yup.addMethod(yup.string, 'minNumber', minNumbers)\n    yup.addMethod(yup.string, 'minNumbers', minNumbers)\n    yup.addMethod(yup.string, 'minSymbol', minSymbols)\n    yup.addMethod(yup.string, 'minSymbols', minSymbols)\n    yup.addMethod(yup.string, 'minRepeating', minRepeating)\n    yup.addMethod(yup.string, 'minWords', minWords)\n    yup.addMethod(yup.string, 'password', password)\n}\n\nmodule.exports = setup\n"],"names":["SignUpForm","styled","Form","FormControls","Input","Field","Label","Error","ErrorMessage","Button","RegisterForm","dispatch","useDispatch","nameId","nanoid","emailId","passwordId","validationSchema","Yup","name","matches","min","max","required","email","password","minUppercase","minLowercase","minNumbers","minSymbols","initialValues","onSubmit","values","resetForm","register","autoComplete","id","type","placeholder","htmlFor","component","YupPassword","SignUpSection","Container","Register","p","word","num","isNullOrUndefined","value","undefined","length","message","msg","this","test","exclusive","params","match","minRepeating","RegExp","minWords","rx","split","filter","v","module","exports","yup","addMethod","string"],"sourceRoot":""}