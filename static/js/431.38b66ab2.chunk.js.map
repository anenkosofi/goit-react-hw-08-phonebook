{"version":3,"file":"static/js/431.38b66ab2.chunk.js","mappings":"2SAGMA,GAAiBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mUAoBdE,EAAeF,EAAAA,GAAAA,IAAH,+CAIZG,GAAQH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,gcAyBLK,EAAQL,EAAAA,GAAAA,MAAH,4hBA0BLM,GAAQN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,qHAQLQ,EAASR,EAAAA,GAAAA,OAAH,ktB,SCrEL,SAASS,IACd,IAAMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IACxBC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,OAEjBE,EAAAA,EAAAA,YAAU,WACJP,GACFQ,EAAAA,GAAAA,QAAc,qBAAsB,CAClCC,MAAO,CACLC,OAAQ,oBACRC,UAAW,OACXC,SAAU,QAEZC,UAAW,CACTC,QAAS,UACTC,UAAW,YAIlB,GAAE,CAACf,IAEJ,IAKMgB,EAAmBC,EAAAA,OAAW,CAClCC,KAAMD,EAAAA,SACHE,QACC,yHACA,+DAEDC,SAAS,0BACZC,OAAQJ,EAAAA,SACLE,QACC,8CACA,+BAEDC,SAAS,4BAiBd,OACE,SAAC,KAAD,CACEE,cApCkB,CACpBJ,KAAM,GACNG,OAAQ,IAmCNL,iBAAkBA,EAClBO,SAlBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9B,GACE5B,EAAS6B,MACP,qBAAGR,KAAgBS,gBAAkBH,EAAON,KAAKU,OAAOD,aAAxD,IAKF,OAFAE,MAAM,GAAD,OAAIL,EAAON,KAAX,uCACLO,IAGFvB,GAAS4B,EAAAA,EAAAA,IAAWN,IACpBC,GACD,EAGC,UAKE,UAACvC,EAAD,CAAgB6C,aAAa,MAA7B,WACE,SAAC,KAAD,CAASC,SAAS,YAAYC,cAAc,KAC5C,UAAC5C,EAAD,YACE,SAACC,EAAD,CACE4C,GAAI9B,EACJ+B,KAAK,OACLjB,KAAK,OACLkB,MAAM,yIACNC,YAAY,OAEd,SAAC7C,EAAD,CAAO8C,QAASlC,EAAhB,mBACA,SAACX,EAAD,CAAO8C,UAAU,MAAMrB,KAAK,aAE9B,UAAC7B,EAAD,YACE,SAACC,EAAD,CACE4C,GAAI5B,EACJ6B,KAAK,MACLjB,KAAK,SACLkB,MAAM,+FACNC,YAAY,OAEd,SAAC7C,EAAD,CAAO8C,QAAShC,EAAhB,qBACA,SAACb,EAAD,CAAO8C,UAAU,MAAMrB,KAAK,eAE9B,SAACvB,EAAD,CAAQwC,KAAK,SAAb,6BAIP,CC1GD,IAAMK,EAAoBrD,EAAAA,GAAAA,QAAH,4CAIjBsD,EAAYtD,EAAAA,GAAAA,IAAH,kUCHA,SAASuD,IACtB,OACE,SAACF,EAAD,WACE,SAACC,EAAD,WACE,SAAC7C,EAAD,OAIP,C,8LCTKG,EAAiB,SAAA4C,GAAK,OAAIA,EAAM9C,SAAS+C,KAAnB,EAEtB3C,EAAkB,SAAA0C,GAAK,OAAIA,EAAM9C,SAASG,SAAnB,EAIvB6C,EAAe,SAAAF,GAAK,OAAIA,EAAMG,MAAV,EAEpBC,EAAmB,SAAAJ,GAAK,OAAIA,EAAMK,MAAMC,aAAhB,EAExBC,EAAW,SAAAP,GAAK,OAAIA,EAAMK,MAAMd,EAAhB,EAEhBiB,GAAyBC,EAAAA,EAAAA,IAC7B,CAACrD,EAAgB8C,IACjB,SAAChD,EAAUiD,GACT,OAAOjD,EAASiD,QAAO,qBAAG5B,KACnBS,cAAc0B,SAASP,EAAOnB,cADd,GAGxB,G","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","pages/AddContact/AddContact.styled.js","pages/AddContact/AddContact.js","redux/contacts/selectors.js"],"sourcesContent":["import { Form, Field, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nconst AddContactForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n\n  padding: 20px;\n  margin: 0 auto;\n\n  width: 99%;\n\n  background-color: #fefefe;\n\n  box-shadow: 0px 8px 12px -4px rgba(50, 88, 130, 0.32);\n  border-radius: 15px;\n\n  @media screen and (min-width: 768px) {\n    width: 510px;\n  }\n`;\n\nconst FormControls = styled.div`\n  position: relative;\n`;\n\nconst Input = styled(Field)`\n  width: 100%;\n  height: 50px;\n\n  padding: 8px 16px;\n\n  font-size: 16px;\n\n  color: #010101;\n  background-color: transparent;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n  outline: none;\n\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  &:focus,\n  &:not(:placeholder-shown) {\n    border-color: #010101;\n  }\n  &:not(:focus) {\n    border-color: rgb(200, 200, 200);\n  }\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  top: 50%;\n  left: 16px;\n  transform: translateY(-50%);\n\n  padding: 2px;\n\n  font-size: 16px;\n\n  color: rgb(200, 200, 200);\n\n  pointer-events: none;\n\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  input:focus ~ &,\n  input:not(:placeholder-shown) ~ & {\n    transform: translateY(-35px) scale(0.8);\n    color: #010101;\n    background-color: #fefefe;\n  }\n`;\n\nconst Error = styled(ErrorMessage)`\n  position: absolute;\n  bottom: -30%;\n  left: 4px;\n  font-size: 12px;\n  color: #ff4500;\n`;\n\nconst Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  margin: 0 auto;\n\n  min-width: 150px;\n  height: 50px;\n\n  font-size: 16px;\n  letter-spacing: 1px;\n  text-align: center;\n\n  color: #010101;\n  background-color: #ededed;\n\n  border: 1px solid rgb(200, 200, 200);\n  border-radius: 10px;\n\n  cursor: pointer;\n\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #fefefe;\n    background-color: #1d976c;\n    border-color: #1d976c;\n  }\n  &:disabled {\n    background-color: #e2e2e2;\n    color: #636363;\n  }\n`;\n\nexport { AddContactForm, FormControls, Input, Label, Error, Button };\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts, selectIsLoading } from 'redux/contacts/selectors';\nimport {\n  AddContactForm,\n  FormControls,\n  Input,\n  Label,\n  Error,\n  Button,\n} from './ContactForm.styled';\n\nexport function ContactForm() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n  const nameId = nanoid();\n  const numberId = nanoid();\n\n  useEffect(() => {\n    if (isLoading) {\n      toast.success('Contact was added!', {\n        style: {\n          border: '1px solid #1d976c',\n          boxShadow: 'none',\n          fontSize: '16px',\n        },\n        iconTheme: {\n          primary: '#1d976c',\n          secondary: '#fefefe',\n        },\n      });\n    }\n  }, [isLoading]);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const validationSchema = Yup.object({\n    name: Yup.string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Name may contain only letters, apostrophe, dash and spaces.'\n      )\n      .required('This field is required'),\n    number: Yup.string()\n      .matches(\n        /^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\s./0-9]*$/,\n        'Phone number must be digits'\n      )\n      .required('This field is required'),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (\n      contacts.find(\n        ({ name }) => name.toLowerCase() === values.name.trim().toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in your contacts.`);\n      resetForm();\n      return;\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <AddContactForm autoComplete=\"off\">\n        <Toaster position=\"top-right\" reverseOrder={false} />\n        <FormControls>\n          <Input\n            id={nameId}\n            type=\"text\"\n            name=\"name\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\" \"\n          />\n          <Label htmlFor={nameId}>Name</Label>\n          <Error component=\"div\" name=\"name\" />\n        </FormControls>\n        <FormControls>\n          <Input\n            id={numberId}\n            type=\"tel\"\n            name=\"number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\" \"\n          />\n          <Label htmlFor={numberId}>Number</Label>\n          <Error component=\"div\" name=\"number\" />\n        </FormControls>\n        <Button type=\"submit\">Add contact</Button>\n      </AddContactForm>\n    </Formik>\n  );\n}\n","import styled from 'styled-components';\n\nconst AddContactSection = styled.section`\n  padding: 36px 0;\n`;\n\nconst Container = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media screen and (min-width: 480px) {\n    width: 480px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 768px;\n  }\n\n  @media screen and (min-width: 1200px) {\n    width: 1200px;\n  }\n`;\n\nexport { AddContactSection, Container };\n","import { ContactForm } from 'components/ContactForm';\nimport { AddContactSection, Container } from './AddContact.styled';\n\nexport default function AddContact() {\n  return (\n    <AddContactSection>\n      <Container>\n        <ContactForm />\n      </Container>\n    </AddContactSection>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectContacts = state => state.contacts.items;\n\nconst selectIsLoading = state => state.contacts.isLoading;\n\nconst selectError = state => state.contacts.error;\n\nconst selectFilter = state => state.filter;\n\nconst selectModalState = state => state.modal.isModalOpened;\n\nconst selectId = state => state.modal.id;\n\nconst selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\nexport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilter,\n  selectModalState,\n  selectId,\n  selectFilteredContacts,\n};\n"],"names":["AddContactForm","styled","Form","FormControls","Input","Field","Label","Error","ErrorMessage","Button","ContactForm","contacts","useSelector","selectContacts","isLoading","selectIsLoading","dispatch","useDispatch","nameId","nanoid","numberId","useEffect","toast","style","border","boxShadow","fontSize","iconTheme","primary","secondary","validationSchema","Yup","name","matches","required","number","initialValues","onSubmit","values","resetForm","find","toLowerCase","trim","alert","addContact","autoComplete","position","reverseOrder","id","type","title","placeholder","htmlFor","component","AddContactSection","Container","AddContact","state","items","selectFilter","filter","selectModalState","modal","isModalOpened","selectId","selectFilteredContacts","createSelector","includes"],"sourceRoot":""}